#!/usr/bin/env python

"""
    usage:
        convert_gem_to_bed [options] gem.mappability

    where the options are:
        -h,--help : print usage and quit
        -d,--debug : print debug information
        -c,--chrom : only do this for this chromosome

    Create a BED file of mappable positions from the GEM mappability output
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError

__author__ = "Aakrosh Ratan"
__email__  = "ratan@virginia.edu"

# do we want the debug information to be printed?
debug_flag = False

def main(filename, chrom):
    f = open(filename, 'r')              

    line = f.readline()
    chromosome = None
    sentinel = None

    while line:
        if line.startswith("~~"):
            if line.startswith("~~ENCODING"):
                line = f.readline()
                while not line.startswith("~"):
                    if line[3:].startswith("~[1-1]"):
                        sentinel = line[1]
                        print >> stderr, "Marker for unique base %s" % sentinel
                    line = f.readline()
            else:
                line = f.readline()
                line = f.readline()
                continue
        else:
            if line.startswith("~"):
                if chromosome != None and start != -1:
                    # end the last chromosome information
                    print "\t".join([chromosome,str(start),str(end)])

                chromosome = line[1:].strip().split()[0]
                if chrom != None and chromosome != chrom:
                    chromosome= None
                index = 0
                start = -1
                end = -1
            elif chromosome != None:
                for b in line:
                    if b == '\n': continue
                    if b == sentinel:
                        if start == -1:
                            start = index
                            end = index + 1
                        elif end == index:
                            end = end + 1
                        else:
                            raise AssertionError("Unexpected start,end: %d,%d" % (start,end))
                    else:
                        if start == -1:
                            pass
                        else:
                            print "\t".join([chromosome,str(start),str(end)])
                            start = -1
                            end = -1
                    
                    index += 1
            line = f.readline() 
    
    if chromosome != None and start != -1:
        print "\t".join([chromosome,str(start),str(end)])

    f.close()   

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdc:",["help", "debug", "chrom="])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    chrom = None

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-c", "--chrom"):
            chrom = a
        else:
            assert False, "unhandled option"

    if len(args) != 1:
        print >> stderr, __doc__
        exit(3)

    main(args[0], chrom)
