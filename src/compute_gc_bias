#!/usr/bin/env python

"""
Compute the fragment rates for various GC lengths.
Version: %(scriptVersion)s
    
    usage:
     compute_gc_bias [options] reference.fa mappable.bed alignments.bam

    where the options are:
        -h,--help     : print usage and quit
        -d,--debug    : print debug information
        -t,--threads  : use these many threads [1]
        -s,--shift    : ignore these many bases at the edge of the fragments [0]
        -m,--minpos   : trust rates only if the number of positions with GC
                        value exceed this threshold [10000]
        -f,--fraction : subsample this fraction of positions to calculate the 
                        rates [0.01]
        -c,--chroms   : use this comma-separated list of chromosome in 
                        calculating the rates only [all]
        -v,--version  : print version and exit
        -q,--quality  : do not consider locations where the mean MQ is less
                        than this threshold [30]
        -a,--avgcov   : average coverage to expect in the BAM file [auto]
        -i,--avgins   : average insert length to expect in the BAM file [auto]
        -x,--stdins   : standard deviation of the insert length in the BAM 
                        file [auto]

   where the arguments are:
        reference.fa : the fasta file of reference sequence
        mappable.bed : the file in BED format that includes regions that are
                       mappable reads of lengths used in this run
        alignments.bam : the alignments of the reads in BAM format 

    Notes:
    1. Optionally the user can specify the number of positions to sample by
       specifying the -f option as an integer > 1.
    2. A script convert_gem_to_bed with this distribution can be used to 
       generate mappable.bed from the output of gem-mappability.
    3. The average coverage is calculated if it is not specified by the user. 
       The same is true for the mean and standard deviation of the insert 
       length. All of these values are calculated from subsamples, so there 
       is a probability for them to be inaccurate despite our best efforts. If 
       possible these should be provided by the user.
    4. The --minpos default of 10,000 positions works best for mammalian sized
       genomes. 
"""

from sys import argv, stderr, stdin, exit, stdout, path
from getopt import getopt, GetoptError
from time import time
from collections import Counter
from random import sample, randint
from bitarray import bitarray
from multiprocessing import Pool
from math import ceil, sqrt, exp
from array import array

import signal as sg
import pysam as ps
import numpy as np

from scipy import interpolate

from utils import *

__author__ = "Aakrosh Ratan"
__email__  = "ratan@virginia.edu"

# do we want the debug information to be printed?
Debug_flag = False

# number of threads to be used 
Num_threads = 1

# number of bases to be ignored from the edge of the fragments
Shift = 0

# fraction of positions to subsample
Fraction = 0.01

# Shared by all threads
Mqmap = {}
Seqmap = {}
Mqsegs = {}

def summarize_counter(counter):
    """Return the mean and std of the values in the Counter.
    """
    sum_of_numbers = sum(number*count for number,count in counter.items())
    count = sum(count for n,count in counter.items())
    mean = sum_of_numbers * 1.0 / count

    total_squares = sum(number*number*count for number,count in counter.items())
    mean_of_squares = total_squares * 1.0 / count
    variance = mean_of_squares - mean * mean
    std_dev = sqrt(variance)    
    return mean,std_dev

def calculate_inserts(filename):
    """Analyze numrequired fragments to infer information about the insert
sizes.
    """
    numrequired = 100000

    bamfile = ps.AlignmentFile(filename, 'rb')
    lengths = np.empty(numrequired)
    numanalyzed = 0

    for aln in bamfile:
        if random() < 0.01:
            if aln.is_duplicate or \
               aln.is_qcfail or \
               aln.is_secondary or \
               aln.is_supplementary or \
               aln.is_unmapped or \
               aln.mate_is_unmapped: continue

            if aln.is_proper_pair and aln.template_length > 0:
                lengths[numanalyzed] = aln.template_length
                numanalyzed += 1
            if numanalyzed == numrequired: break

    lengths = lengths[0:numanalyzed]
    print >> stderr, "Sampled %d proper pairs to create a distribution"\
          % numanalyzed
    return int(np.mean(lengths)), np.std(lengths)

def calculate_coverage_stats(refname, bamname, chroms):
    """Analyze numrequired positions to infer information about coverage
    """
    global Fraction, Mqsegs, Num_threads
    
    coverage = Counter()
    inputs = []

    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            if chroms and chrom not in chroms: continue
        
            nums = int(Fraction * length * 0.5)
            chrom_segs = Mqsegs[chrom]

            if len(chrom_segs) > 0:
                indx = randint(0, len(chrom_segs) -1)
                start = chrom_segs[indx][0]
                end = chrom_segs[indx][1]
            else:
                start = randint(0, length-nums-1)  
                end = start + nums
            inputs.append((bamname, chrom, start, end))
    
    original_sigint_handler = sg.signal(sg.SIGINT, sg.SIG_IGN)
    pool = Pool(processes = Num_threads)
    sg.signal(sg.SIGINT, original_sigint_handler)

    try:
        for _coverage in pool.imap_unordered(calculate_coverage,inputs):
            coverage += _coverage
    except KeyboardInterrupt:
        pool.terminate()
    else:
        pool.close()
    pool.join()
     
    mean,std_dev = summarize_counter(coverage)
    return int(mean),std_dev

def calculate_coverage(args):
    return _calculate_coverage(*args)

def _calculate_coverage(bamname, chrom, start, stop):
    coverage = Counter()

    bf = ps.AlignmentFile(bamname, 'rb')
    for pc in bf.pileup(chrom, start, stop):
        mq = np.mean([pr.alignment.mapping_quality for pr in pc.pileups])
        if mq < 30: continue
        coverage[pc.n] += 1
    bf.close()

    return coverage

def gen_reference_mq(refname, mapname, chroms):
    """ Generate a map of mappable location.
    """
    global Mqmap, Mqsegs

    # read in the length of the contigs, and assign memory for them
    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            assert chrom not in Mqmap
            if chroms and chrom not in chroms: continue
            Mqmap[chrom] = bitarray([0]* length)
            Mqsegs[chrom] = []

    # read in the mappability information marking the mappable bases
    with open(mapname, 'r') as f:
        for line in f:
            chrom,start,stop = line.strip().split("\t")
            if chroms and chrom not in chroms: continue

            chrom_map = Mqmap[chrom]
            if (int(stop)-int(start)) > 10000: 
                Mqsegs[chrom].append((int(start),int(stop)))
            chrom_map[int(start):int(stop)] = True

def gen_reference_seq(refname, chroms):
    global Seqmap
    ff = ps.FastaFile(refname)

    # read in the length of the contigs, and assign memory for them
    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,_,_,_,_ = line.strip().split("\t")
            if chroms and chrom not in chroms: continue
            Seqmap[chrom] = ff.fetch(chrom).upper()

    ff.close()

def factorial(n):
    if n == 1 or n == 0:
        return 1
    return n * factorial(n-1)

def lander_waterman(coverage):
    if coverage > 100: return 0.5*coverage,2.0*coverage

    total = 0.0
    hits = 0
    mincov = None
    while total < 0.999:
        probability = pow(coverage, hits) * exp(-coverage) / factorial(hits)
        total += probability
        hits += 1
        if total > 0.0 and mincov is None:
            mincov = hits
        maxcov = hits
    return mincov,maxcov

def main(refname,mapname,bamname,min_num_pos,chroms,minq,avgcov,avgins,stdins):
    global Num_threads, Fraction, Shift

    # get the average insert length
    if avgins == None or stdins == None:
        av_insert,std_insert = calculate_inserts(bamname)
        if (av_insert - 3*std_insert) < 0:
            print >> stderr, ""
            print >> stderr, "PLEASE NOTE"
            print >> stderr,"Calculated mean and std of insert lengths: %d,%.2f"\
                    % (av_insert,std_insert)
            print >> stderr, "This seems unlikely, so please set these values using -i and -x"
            exit(1)
    else:
        av_insert = avgins
        std_insert = stdins
    update("Mean and std of insert lengths: %d,%.2f" % (av_insert,std_insert))

    # read the mappability information for the reference
    gen_reference_mq(refname, mapname, chroms)
    update("Generated the mappability hash")
 
    # read the sequence from the reference
    gen_reference_seq(refname, chroms)
    update("Generated the sequence hash")

    # calculate coverage cutoffs for locations I am going to consider
    if avgcov == None:
        meancov,stdcov=calculate_coverage_stats(refname, bamname, chroms)
        mincutoff = max(meancov - 3*stdcov, 0)
        maxcutoff = meancov + 3*stdcov
    else:
        mincutoff,maxcutoff = lander_waterman(avgcov)
    update("Coverage cutoff: %d,%d" % (mincutoff,maxcutoff))

    # calculate the sum of all chromosome lengths which will be needed in case
    # of subsampling
    if Fraction > 1.0:
        dblen = 0
        with open("%s.fai" % refname, 'r') as f:
            for line in f:
                chrom,length,_,_,_ = line.strip().split("\t")
                if chroms and chrom not in chroms: continue
                dblen += int(length)

    rates = np.zeros(shape = (av_insert+1, 2), dtype = np.int) 
    inputs = []
 
    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            if chroms and chrom not in chroms: continue
            if chrom not in Mqmap : continue
            
            num_select = None
            if Fraction < 1.0:
                num_select = int(length * Fraction) 
            elif Fraction > 1.0:
                num_select = int(length * Fraction / dblen)     
   
            partsize = int(ceil(length / Num_threads))
            for i in xrange(0, length, partsize):
                inputs.append((chrom,i,min(i+partsize,length),bamname,
                               mincutoff,maxcutoff,av_insert,
                               int(num_select*1.0/Num_threads), minq))
       
    original_sigint_handler = sg.signal(sg.SIGINT, sg.SIG_IGN)
    pool = Pool(processes = Num_threads)
    sg.signal(sg.SIGINT, original_sigint_handler)
    update("Ready to start using the pool")     

    try:
        for _rates in pool.imap_unordered(process_region,inputs):
            rates += _rates
    except KeyboardInterrupt:
        pool.terminate()
    else:
        pool.close()
    pool.join()
    update("Calculated the fragment rates from the subsample")

    # calculate the global rate
    frags = 0
    numpos = 0
    for i in xrange(0, av_insert+1):
        numpos += rates[i][0]
        frags += rates[i][1]
    meanrate = frags * 1.0 / numpos
    update("Calculated the fragment rates")


    gc = []
    orate = []
    for i in xrange(0, av_insert+1):
        if rates[i][0] < min_num_pos: continue
        if rates[i][1] == 0: continue
        
        gc.append(i)
        orate.append(meanrate*rates[i][0]/rates[i][1])

    # lets try to predict the rates for the GC values where we could not
    # calculate the rates. We do this by a one-dimensional smoothing spline fit
    # to the known rates
    std = np.std(orate)
    m = len(orate)
    mins = (m - sqrt(2*m)) * pow(std,2)
    f = interpolate.UnivariateSpline(gc, orate, s = mins, ext = 3)
    
    for i in xrange(0, av_insert+1):
        numpos,numfrags = rates[i]
        if numpos < min_num_pos or numfrags == 0:
            orate = None
        else:
            orate = meanrate*numpos/numfrags
        mrate = f(i)
        print tabout(i,numpos,numfrags,orate,mrate)
  
def process_region(args):
    return _process_region(*args)

def process_region_left(args):
    return _process_region_left(*args)

def _process_region(chrom,start,end,bamname,mincutoff,
                    maxcutoff, av_insert, numselect, minq):
    global Shift, Mqmap, Seqmap

    bf = ps.AlignmentFile(bamname, 'rb')
    chrommq = Mqmap[chrom]
    chromseq = Seqmap[chrom]
    rates = np.zeros(shape = (av_insert+1, 2), dtype = np.int) 

    smpls = sample(range(start,end),min(numselect,end-start))
    locs = [x for x in smpls if chrommq[x]]
    locs = set(locs)    

    for pc in bf.pileup(chrom, start, end, truncate = True):
        if pc.reference_pos not in locs: continue
        if (pc.n > maxcutoff) or (pc.n < mincutoff): continue       

        counter = Counter(chromseq[pc.reference_pos+Shift:pc.reference_pos+av_insert-Shift])
        gc = counter['G'] + counter['C']

        frags = 0
        mqsum = 0
        for pr in pc.pileups:
            if pr.is_head and pr.alignment.is_reverse == False:
                frags += 1 
                mqsum += pr.alignment.mapping_quality
        if frags != 0 and (mqsum*1.0/frags) < minq: continue

        rates[gc][0] += 1
        rates[gc][1] += frags

    bf.close()
    return rates

def _process_region_left(chrom, start, end, bamname, mincutoff,
                         maxcutoff, av_insert, minq, left):
    global Shift, Mqmap, Seqmap

    bf = ps.AlignmentFile(bamname, 'rb')
    rates = np.zeros(shape = (av_insert+1, 2), dtype = np.int) 
    chrommq = Mqmap[chrom]
    chromseq = Seqmap[chrom]
    locs  = np.zeros((end - start), dtype = np.int)

    counter = Counter(chromseq[start+Shift:start+av_insert-Shift])
    gc = counter['G'] + counter['C'] 
    pos = start + 1
    numpos = 0
    totlen = len(chromseq)

    while pos < end:
        if (pos+Shift) < totlen:
            counter[chromseq[pos+Shift-1]] -= 1
        if (pos+av_insert-Shift) < totlen:
            counter[chromseq[pos+av_insert-Shift]] += 1
        gc = counter['G'] + counter['C']
        if gc in left :
            locs[numpos] = pos
            numpos += 1
        pos += 1

    locs = set(locs[0:numpos])

    for pc in bf.pileup(chrom, start, end, truncate = True):
        if pc.reference_pos not in locs: continue
        if (pc.n > maxcutoff) or (pc.n < mincutoff): continue       

        counter = Counter(chromseq[pc.reference_pos+Shift:pc.reference_pos+av_insert-Shift])
        gc = counter['G'] + counter['C']

        frags = 0
        mqsum = 0
        for pr in pc.pileups:
            if pr.is_head and pr.alignment.is_reverse == False:
                frags += 1 
                mqsum += pr.alignment.mapping_quality
        if frags != 0 and (mqsum*1.0/frags) < minq: continue

        rates[gc][0] += 1
        rates[gc][1] += frags

    bf.close()
    return rates

if __name__ == "__main__":
    with open(path[0]+'/VERSION',"r") as version_file:
        version = version_file.read().strip()

    try:
        opts, args = getopt(argv[1:], "hdt:s:m:f:c:vq:a:i:x:",
                     ["help","debug","threads=","shift=","minpos=", 
                      "fraction=", "chroms=", "version", "quality=", "avgcov=",
                      "avgins=","stdins="])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__ % {'scriptVersion':version}
        exit(2) 

    min_num_pos = 10000
    chroms = None
    printversion = False
    min_quality = 30
    avg_cov = None
    avg_ins = None
    std_ins = None

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__ % {'scriptVersion':version}
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-t", "--threads"):
            Num_threads = int(a)
        elif o in ("-s", "--shift"):
            Shift = int(a)
        elif o in ("-m", "--minpos"):
            min_num_pos = int(a)
        elif o in ("-f" ,"--fraction"):
            Fraction = float(a)
        elif o in ("-c", "--chroms"):
            chroms = a.split(",")
            chroms = set(chroms)
        elif o in ("-v", "--version"):
            printversion = True
        elif o in ("-q", "--quality"):  
            min_quality = int(a)
        elif o in ("-a", "--avgcov"):
            avg_cov = int(float(a))
        elif o in ("-i", "--avgins"):
            avg_ins = int(float(a))
        elif o in ("-x", "--stdins"):
            std_ins = float(a)
        else:
            assert False, "unhandled option"

    if printversion:
        print >> stderr, "Program: compute_gc_bias"
        print >> stderr, "Version: %s" % version
        print >> stderr, "Contact: Aakrosh Ratan (ratan@virginia.edu)"
        exit(0)

    if len(args) != 3:
        print >> stderr, __doc__ % {'scriptVersion':version}
        exit(3)

    main(args[0], args[1], args[2], min_num_pos, chroms, min_quality, avg_cov,
         avg_ins, std_ins)
