#!/usr/bin/env python

"""
Correct and bin the read counts.
Version: %(scriptVersion)s

    usage:
    correct_gc_bias [options] output.txt reference.fa reference.map rates.txt alignments.bam

    where the options are:
        -h,--help    : print usage and quit
        -d,--debug   : print debug information
        -t,--threads : use these many threads [1]
        -b,--binsize : number of mappable bases in a bin [auto]
        -x,--noloess : do not run additional loess correction 
        -v,--version : print version and exit
    
    where the arguments are:
        output.txt   : the output file
        reference.fa : the fasta file of reference sequence
        mappable.bed : the file in BED format that includes regions that are
                       mappable reads of lengths used in this run
        rates.txt    : the output from compute_gc_bias
        alignments.bam : the alignments of the reads in BAM format 

    Notes:
    1. The loess correction is run on the binned counts to remove any bias
       that was not accounted for using the fragment model and could effect
       the data at that resolution.
    2. When using a reference.map that has all regions except the N's in the 
       reference genome, the user should use --quality 0 so that all reads, and 
       not only the uniquely mapped ones are counted.
"""

from sys import argv, stderr, stdin, exit, stdout, path
from getopt import getopt, GetoptError
from itertools import izip
from multiprocessing import Pool
from collections import Counter
from tempfile import NamedTemporaryFile
from math import sqrt

import shutil as sh
import signal as sg
import pysam as ps
import numpy as np
import statsmodels.api as sm

from utils import * 

__author__ = "Aakrosh Ratan"
__email__  = "ratan@virginia.edu"

# do we want the debug information to be printed?
debug_flag = False

# the size of the window
Winlength = -1

# the number of threads
Num_threads = 1

# the bin size
Bin_size = None

Mqmap = {}
Seqmap = {}

def read_gc_rates(filename, bamname):
    rtmap = {}

    with open(filename,'r') as f:
        for line in f:
            dist,_,_,_,scale = line.strip().split("\t")
            if scale != "-":
                rtmap[int(dist)] = float(scale)

    maxdist = int(dist)

    return rtmap,maxdist      

def correct_region_gc(args):
    return _correct_region_gc(*args)

def _correct_region_gc(chrom, start, stop, bamname, rtmap):
    global Winlength, Seqmap, Mqmap
    
    mqmap = Mqmap[chrom]
    seq = Seqmap[chrom]

    fgcmap = Counter()
    fcounts = Counter(seq[start:start+Winlength])
    fa = fcounts['A']          
    fc = fcounts['C']
    fg = fcounts['G'] 
    ft = fcounts['T']
    
    rgcmap = Counter()
    rcounts = Counter(seq[max(start-Winlength,0):start])
    ra = rcounts['A']
    rc = rcounts['C']
    rg = rcounts['G']
    rt = rcounts['T']

    for i in xrange(start,stop):
        if mqmap[i] == True and (fa+fc+fg+ft) > 0:
            fgcmap[i] = fg + fc
        fcounts[seq[i]] -= 1
        try:
            fcounts[seq[i+Winlength]] += 1
        except IndexError:
            pass

        if mqmap[i] == True and (ra+rc+rg+rt) > 0:
            rgcmap[i] = rg + rc
        rcounts[seq[i]] += 1
        if i >= Winlength:
            rcounts[seq[i-Winlength]] -= 1

        fa = fcounts['A']
        fc = fcounts['C']
        fg = fcounts['G']
        ft = fcounts['T']

        ra = rcounts['A']
        rc = rcounts['C']
        rg = rcounts['G']
        rt = rcounts['T']

    original = np.zeros(stop-start, np.int)
    corrected = np.zeros(stop-start, np.float)

    for i in xrange(start,stop):
        if mqmap[i] == True and fgcmap[i] in rtmap and rgcmap[i] in rtmap:
            pass
        else:
            j = i-start
            original[j] = -1
            corrected[j] = -1

    bamfile = ps.AlignmentFile(bamname, 'rb')
    for aln in bamfile.fetch(chrom,start,stop):
        if aln.is_unmapped or aln.is_secondary or aln.is_supplementary or \
           aln.is_qcfail or aln.is_duplicate: continue
    
        if aln.is_reverse:
            if aln.aend < start or aln.aend >= stop: continue
            if mqmap[aln.aend] == False: continue
            fgc = fgcmap[aln.aend]
            rgc = rgcmap[aln.aend]
            if (fgc not in rtmap) or (rgc not in rtmap): continue
            original[aln.aend-start] += 1
            corrected[aln.aend-start] += rtmap[rgc]
        else:
            if aln.pos < start or aln.pos >= stop: continue
            if mqmap[aln.pos] == False: continue
            fgc = fgcmap[aln.pos]
            rgc = rgcmap[aln.pos]
            if (fgc not in rtmap) or (rgc not in rtmap): continue
            original[aln.pos-start] += 1
            corrected[aln.pos-start] += rtmap[fgc]

    bamfile.close()
    return chrom,start,original,corrected

def gen_reference_mq(refname, mapname, readlength, chroms=None):
    """ Generate a map of mappable location.
    """
    global Mqmap

    # read in the length of the contigs, and assign memory for them
    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            assert chrom not in Mqmap
            if chroms and chrom not in chroms: continue
            Mqmap[chrom] = bitarray([0]* length)

    # read in the mappability information marking the mappable bases
    with open(mapname, 'r') as f:
        for line in f:
            chrom,start,stop = line.strip().split("\t")
            if chroms and chrom not in chroms: continue
            if (int(stop) - int(start)) < readlength: continue
            chrom_map = Mqmap[chrom]
            chrom_map[int(start):int(stop)] = True

def gen_reference_seq(refname, chroms=None):
    global Seqmap
    ff = ps.FastaFile(refname)

    # read in the length of the contigs, and assign memory for them
    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,_,_,_,_ = line.strip().split("\t")
            if chroms and chrom not in chroms: continue
            Seqmap[chrom] = ff.fetch(chrom).upper()

    ff.close()

def main(outname, refname, mapname, ratename, bamname, loess, minspan):
    global Winlength, Num_threads, Bin_size

    # read the rates for the various GC values
    rtmap,maxdist = read_gc_rates(ratename, bamname)
    update("Read the fragment rates.")
    Winlength = maxdist

    # read the mappability information for the reference
    gen_reference_mq(refname, mapname, minspan)
    update("Generated the mappability hash")
 
    # read the sequence from the reference
    gen_reference_seq(refname)
    update("Generated the sequence hash")

    inputs = []
    rawcounts = {}
    corrcounts = {}

    with open("%s.fai" % refname, 'r') as f:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            if chrom not in Mqmap : continue

            rawcounts[chrom] = np.zeros(length, np.int)
            corrcounts[chrom] = np.zeros(length, np.float) 

            partsize = int(ceil(length * 1.0 / Num_threads))
            for i in xrange(0, length, partsize):
                inputs.append((chrom,i,min(i+partsize,length),bamname,rtmap))

    original_sigint_handler = sg.signal(sg.SIGINT, sg.SIG_IGN) 
    pool = Pool(processes = Num_threads)
    sg.signal(sg.SIGINT, original_sigint_handler)
    update("Pools ready")

    try:
        for chrm,stt,_raw,_corr in pool.imap_unordered(correct_region_gc,inputs):
            rawcounts[chrm][stt:(stt+len(_raw))] += _raw
            corrcounts[chrm][stt:(stt+len(_corr))] += _corr
    except KeyboardInterrupt:
        pool.terminate()
    else:
        pool.close()
    pool.join()
    update("Pools done")

    # if not specified, calculate a good bin size to use
    if Bin_size == None:
        chrm = None
        length = 0
        with open("%s.fai" % refname, 'r') as f:
            for line in f:
                chrm,length,_,_,_ = line.strip().split("\t")
                length = int(length)
                break

        ratio = 1
        lastbs = 0

        mask = np.ones(length, dtype = bool)
        rcn = rawcounts[chrm]
        for i,x in enumerate(rcn):
            if x == -1: mask[i] = 0
        arr = corrcounts[chrm]
        arr = arr[mask]

        while ratio < 4:
            bs = lastbs + 50
    
            num = int(len(arr) * 1.0 / bs)
            dat = np.zeros(num)
            for i,x in enumerate(np.split(arr[:(num*bs)],num)):
                dat[i] = sum(x)
         
            k = np.mean(dat)
            v = np.std(dat)
            ratio = k/v  
            if debug_flag: update("Binsize %d : %f, %f, %f" % (bs, k, v, ratio))

            lastbs = bs

        Bin_size = lastbs

    # bin the corrected counts
    with open("%s.fai" % refname, 'r') as f, open(outname, 'w') as g:
        for line in f:
            chrom,length,_,_,_ = line.strip().split("\t")
            length = int(length)
            if chrom not in Mqmap : continue

            seqmap = Seqmap[chrom]
            indx = 0
            gc = 0
            rc = 0
            cc = 0
            start = None

            for i,(r,c) in enumerate(izip(rawcounts[chrom], corrcounts[chrom])):
                if r == -1: continue
                if start == None: start = i                  

                indx += 1
                rc += r
                cc += c
                end = i
                gc += 1 if seqmap[i] in ["G","C"] else 0

                if indx == Bin_size:
                    print >> g, tabout(chrom,start,end+1,gc,rc,cc)
                    indx = 0
                    gc = 0
                    rc = 0
                    cc = 0
                    start = end + 1

            if indx != 0:
                print >> g, tabout(chrom,start,length,gc,rc,cc)
    update("Binning done")             
      
    if loess:
        meancov = {}
        tmparray = np.genfromtxt(outname, usecols = (3,5)) 
        coverage = tmparray[:,1]
        gccontent = tmparray[:,0]
        smoothed = sm.nonparametric.lowess(coverage, gccontent)
        for x,y in smoothed:
            meancov[int(x)] = y
        meanofcoverages = np.median(coverage)

        with NamedTemporaryFile(delete=False) as outfile:
            with open(outname) as infile:
                for line in infile:
                    chrom,start,end,gc,rcount,ccount = line.strip().split()
                    ccount = meanofcoverages * float(ccount) / meancov[int(gc)]
                    print >> outfile, tabout(chrom,start,end,gc,rcount,ccount)

        sh.move(outfile.name, outname)
    update("Corrections done")

if __name__ == "__main__":
    with open(path[0]+'/VERSION',"r") as version_file:
        version = version_file.read().strip()

    try:
        opts, args = getopt(argv[1:], "hdt:b:lvm:",
                     ["help", "debug", "threads=", "binsize=", "loess",
                      "version" "minspan="])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__ % {'scriptVersion' : version}
        exit(2) 

    loess = True
    printversion = False
    minspan = 1

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__ % {'scriptVersion' : version}
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-t", "--threads"):
            Num_threads = int(a)
        elif o in ("-b", "--binsize"):
            Bin_size = int(a)
        elif o in ("-x", "--noloess"):
            loess = False
        elif o in ("-m", "--minspan"):
            minspan = int(a)
        elif o in ("-v", "--version"):
            printversion = True
        else:
            assert False, "unhandled option"

    if printversion:
        print >> stderr, "Program: correct_gc_bias"
        print >> stderr, "Version: %s" % version
        print >> stderr, "Contact: Aakrosh Ratan (ratan@virginia.edu)"
        exit(0)


    if len(args) != 5:
        print >> stderr, __doc__ % {'scriptVersion' : version}
        exit(3)

    main(args[0], args[1], args[2], args[3], args[4], loess, minspan)
